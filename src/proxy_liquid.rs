// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct LiquidStakingProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for LiquidStakingProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = LiquidStakingProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        LiquidStakingProxyMethods { wrapped_tx: tx }
    }
}

pub struct LiquidStakingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> LiquidStakingProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<u64>,
        Arg4: ProxyArg<BigUint<Env::Api>>,
        Arg5: ProxyArg<usize>,
        Arg6: ProxyArg<u64>,
    >(
        self,
        accumulator_contract: Arg0,
        fees: Arg1,
        rounds_per_epoch: Arg2,
        minimum_rounds: Arg3,
        max_selected_providers: Arg4,
        max_delegation_addresses: Arg5,
        unbond_period: Arg6,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&accumulator_contract)
            .argument(&fees)
            .argument(&rounds_per_epoch)
            .argument(&minimum_rounds)
            .argument(&max_selected_providers)
            .argument(&max_delegation_addresses)
            .argument(&unbond_period)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LiquidStakingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LiquidStakingProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn delegate(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("delegate")
            .original_result()
    }

    pub fn un_delegate(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("unDelegate")
            .original_result()
    }

    pub fn withdraw(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("withdraw")
            .original_result()
    }

    pub fn register_ls_token<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<usize>,
    >(
        self,
        token_display_name: Arg0,
        token_ticker: Arg1,
        num_decimals: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("registerLsToken")
            .argument(&token_display_name)
            .argument(&token_ticker)
            .argument(&num_decimals)
            .original_result()
    }

    pub fn register_unstake_token<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<usize>,
    >(
        self,
        token_display_name: Arg0,
        token_ticker: Arg1,
        num_decimals: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("registerUnstakeToken")
            .argument(&token_display_name)
            .argument(&token_ticker)
            .argument(&num_decimals)
            .original_result()
    }

    pub fn set_state_active(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setStateActive")
            .original_result()
    }

    pub fn set_state_inactive(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setStateInactive")
            .original_result()
    }

    pub fn set_accumulator_contract<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        accumulator_contract: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setAccumulatorContract")
            .argument(&accumulator_contract)
            .original_result()
    }

    pub fn set_fees<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        fees: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setFees")
            .argument(&fees)
            .original_result()
    }

    pub fn set_minimum_rounds<
        Arg0: ProxyArg<u64>,
    >(
        self,
        minimum_rounds: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setMinimumRounds")
            .argument(&minimum_rounds)
            .original_result()
    }

    pub fn set_max_delegation_addresses<
        Arg0: ProxyArg<usize>,
    >(
        self,
        number: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setMaxDelegationAddresses")
            .argument(&number)
            .original_result()
    }

    pub fn set_max_selected_providers<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        number: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setMaxSelectedProviders")
            .argument(&number)
            .original_result()
    }

    pub fn set_unbond_period<
        Arg0: ProxyArg<u64>,
    >(
        self,
        period: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setUnbondPeriod")
            .argument(&period)
            .original_result()
    }

    pub fn set_managers<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        managers: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setManagers")
            .argument(&managers)
            .original_result()
    }

    pub fn remove_manager<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        manager: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeManager")
            .argument(&manager)
            .original_result()
    }

    pub fn fees(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("fees")
            .original_result()
    }

    pub fn accumulator_contract(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAccumulatorContract")
            .original_result()
    }

    pub fn rounds_per_epoch(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("roundsPerEpoch")
            .original_result()
    }

    pub fn minimum_rounds(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("minimumRounds")
            .original_result()
    }

    pub fn state(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, State> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getState")
            .original_result()
    }

    pub fn ls_token(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLsTokenId")
            .original_result()
    }

    pub fn ls_token_supply(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLsSupply")
            .original_result()
    }

    pub fn virtual_egld_reserve(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getVirtualEgldReserve")
            .original_result()
    }

    pub fn rewards_reserve(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getRewardsReserve")
            .original_result()
    }

    pub fn total_withdrawn_egld(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalWithdrawnEgld")
            .original_result()
    }

    pub fn unstake_token(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUnstakeTokenId")
            .original_result()
    }

    pub fn pending_egld(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPendingEGLDForDelegate")
            .original_result()
    }

    pub fn pending_egld_for_unstake(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPendingEGLDForUnDelegate")
            .original_result()
    }

    pub fn pending_egld_for_unbond(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPendingEgldForUnbond")
            .original_result()
    }

    pub fn unstake_token_nonce<
        Arg0: ProxyArg<u64>,
    >(
        self,
        epoch: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUnstakeTokenNonce")
            .argument(&epoch)
            .original_result()
    }

    pub fn max_delegation_addresses(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("maxDelegationAddresses")
            .original_result()
    }

    pub fn max_selected_providers(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("maxSelectedProviders")
            .original_result()
    }

    pub fn unbond_period(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unbondPeriod")
            .original_result()
    }

    pub fn delegation_addresses_list(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDelegationAddressesList")
            .original_result()
    }

    pub fn delegation_contract_data<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        contract_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, DelegationContractInfo<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDelegationContractInfo")
            .argument(&contract_address)
            .original_result()
    }

    pub fn managers(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getManagers")
            .original_result()
    }

    pub fn scoring_config(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ScoringConfig> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getScoringConfig")
            .original_result()
    }

    pub fn delegate_pending<
        Arg0: ProxyArg<OptionalValue<BigUint<Env::Api>>>,
    >(
        self,
        amount: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("delegatePending")
            .argument(&amount)
            .original_result()
    }

    pub fn un_delegate_pending<
        Arg0: ProxyArg<OptionalValue<BigUint<Env::Api>>>,
    >(
        self,
        amount: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unDelegatePending")
            .argument(&amount)
            .original_result()
    }

    pub fn withdraw_pending<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        contract: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("withdrawPending")
            .argument(&contract)
            .original_result()
    }

    pub fn claim_rewards(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimRewards")
            .original_result()
    }

    pub fn delegate_rewards(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("delegateRewards")
            .original_result()
    }

    pub fn migrate<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        virtual_egld_amount: Arg0,
        original_caller: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("migrate")
            .argument(&virtual_egld_amount)
            .argument(&original_caller)
            .original_result()
    }

    pub fn migrate_pending(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("migratePending")
            .original_result()
    }

    pub fn add_rewards(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("addRewards")
            .original_result()
    }

    pub fn add_migration_sc_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addMigrationScAddress")
            .argument(&address)
            .original_result()
    }

    pub fn migration_sc_address(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getMigrationScAddress")
            .original_result()
    }

    pub fn can_execute_pending_tasks(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("canExecutePendingTasks")
            .original_result()
    }

    pub fn get_ls_value_for_position<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        ls_token_amount: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLsValueForPosition")
            .argument(&ls_token_amount)
            .original_result()
    }

    pub fn get_egld_position_value<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        egld_amount: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getEgldPositionValue")
            .argument(&egld_amount)
            .original_result()
    }

    pub fn get_exchange_rate(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getExchangeRate")
            .original_result()
    }

    pub fn get_delegation_contract_staked_amount<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        delegation_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDelegationContractStakedAmount")
            .argument(&delegation_address)
            .original_result()
    }

    pub fn get_delegation_contract_unstaked_amount<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        delegation_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDelegationContractUnstakedAmount")
            .argument(&delegation_address)
            .original_result()
    }

    pub fn whitelist_delegation_contract<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
        Arg4: ProxyArg<u64>,
        Arg5: ProxyArg<u64>,
    >(
        self,
        contract_address: Arg0,
        admin_address: Arg1,
        total_staked: Arg2,
        delegation_contract_cap: Arg3,
        nr_nodes: Arg4,
        apy: Arg5,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("whitelistDelegationContract")
            .argument(&contract_address)
            .argument(&admin_address)
            .argument(&total_staked)
            .argument(&delegation_contract_cap)
            .argument(&nr_nodes)
            .argument(&apy)
            .original_result()
    }

    pub fn change_delegation_contract_admin<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        contract_address: Arg0,
        admin_address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("changeDelegationContractAdmin")
            .argument(&contract_address)
            .argument(&admin_address)
            .original_result()
    }

    pub fn change_delegation_contract_params<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<u64>,
        Arg4: ProxyArg<u64>,
        Arg5: ProxyArg<bool>,
    >(
        self,
        contract_address: Arg0,
        total_staked: Arg1,
        delegation_contract_cap: Arg2,
        nr_nodes: Arg3,
        apy: Arg4,
        is_eligible: Arg5,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("changeDelegationContractParams")
            .argument(&contract_address)
            .argument(&total_staked)
            .argument(&delegation_contract_cap)
            .argument(&nr_nodes)
            .argument(&apy)
            .argument(&is_eligible)
            .original_result()
    }

    pub fn set_scoring_config<
        Arg0: ProxyArg<ScoringConfig>,
    >(
        self,
        config: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setScoringConfig")
            .argument(&config)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, PartialEq, Eq, Copy, Clone, Debug)]
pub enum State {
    Inactive,
    Active,
}

#[type_abi]
#[derive(TopEncode)]
pub struct ChangeLiquidityEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub ls_token_id: TokenIdentifier<Api>,
    pub ls_token_supply: BigUint<Api>,
    pub virtual_egld_reserve: BigUint<Api>,
    pub rewards_reserve: BigUint<Api>,
    pub total_withdrawn_egld: BigUint<Api>,
    pub pending_egld: BigUint<Api>,
    pub pending_egld_for_unstake: BigUint<Api>,
    pub pending_egld_for_unbond: BigUint<Api>,
    pub block: u64,
    pub epoch: u64,
    pub timestamp: u64,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, PartialEq, Eq, Debug)]
pub struct DelegationContractInfo<Api>
where
    Api: ManagedTypeApi,
{
    pub admin_address: ManagedAddress<Api>,
    pub total_staked: BigUint<Api>,
    pub delegation_contract_cap: BigUint<Api>,
    pub nr_nodes: u64,
    pub apy: u64,
    pub total_staked_from_ls_contract: BigUint<Api>,
    pub total_unstaked_from_ls_contract: BigUint<Api>,
    pub eligible: bool,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, PartialEq, Eq, Debug)]
pub struct ScoringConfig {
    pub min_nodes: u64,
    pub max_nodes: u64,
    pub min_apy: u64,
    pub max_apy: u64,
    pub stake_weight: u64,
    pub apy_weight: u64,
    pub nodes_weight: u64,
    pub max_score_per_category: u64,
    pub exponential_base: u64,
    pub apy_growth_multiplier: u64,
}
